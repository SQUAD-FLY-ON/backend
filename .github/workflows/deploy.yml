name: Deploy to GCP Compute Instance

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 저장소 코드 체크아웃
      - name: Load code from GitHub repository
        uses: actions/checkout@v4

      # 2. JDK 설치 (Gradle 빌드용)
      - name: Install JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # 3. Gradle 캐시 활용 (의존성 다운로드 최소화)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. application-dev.yml 주입
      - name: Copy application-dev.yml
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application-dev.yml

      # 5. Docker Buildx 설정 (BuildKit + 캐시 활성화)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 7. Docker 이미지 빌드 & 푸시 (캐시 활용)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.dev
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/flyon:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/flyon:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/flyon:buildcache,mode=max

      # 8. SSH 접속 후 GCP 서버에 배포
      - name: SSH into GCP VM and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            cd ~/backend/

            sudo git pull

            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            # 오래된 컨테이너 중지
            sudo docker compose -f docker-compose.dev.yml down || true

            # 최신 이미지 풀 & 재시작
            sudo docker compose -f docker-compose.dev.yml pull
            sudo docker compose -f docker-compose.dev.yml up -d --remove-orphans
